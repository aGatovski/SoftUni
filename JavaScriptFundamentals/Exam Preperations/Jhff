#include <iostream>
using namespace std;
const int MAX_SIZE = 101;

void swap(char &a, char &b) {
    char temp = a;
    a = b;
    b = temp;
}

unsigned getLength(char* input) {

    unsigned length = 0;

    while (input[length]) {

        length++;

    }

    return length;
}

void insertionSort(char* input) {

    unsigned length = getLength(input);

    

    for (unsigned i = 1; i < length; i++)
    {
        char temp = input[i];
        int j = i-1;

        while (j >= 0 && input[j] > temp) {

            input[j+1] = input[j];
            j--;

        }

        input[j+1] = temp;
    }
}

unsigned factorial(unsigned number) {

    unsigned factorial=1;
    while (number != 0) {

        factorial *= number;
        number--;

    }

    return factorial;

}

unsigned maxLexicographicalRepresentations(char* input) {

    unsigned max;
    unsigned uniqueCharachters = 0;
    unsigned length = getLength(input);

    for (unsigned i = 0; i < length; i++)
    {
        char temp = input[i];

        if (temp != input[i + 1]) {

            uniqueCharachters++;

        }
    }

    if (uniqueCharachters != length) {

        max = factorial(length) / uniqueCharachters;

    }

    else  max = factorial(length);

    return max;
}

void NextLexicographicalRepresentation(char* input) {
    unsigned length = getLength(input);

    //  Find the rightmost pair of characters in the string such that input[i] > input[i - 1]
    unsigned i = length;
    while (i > 0 && input[i] <= input[i - 1]) {

        i--;

    }

    // If such a pair is found, swap input[i - 1] with the smallest character to its right that is greater
    if (i > 0) {

        unsigned j = length;

        while (input[j] <= input[i - 1]) {
        
            j--;

        }

        swap(input[i - 1], input[j]);

    }

    // Reverse the remaining part of the string to get the smallest lexicographical representation
    
    for (unsigned start = i, end = length - 1; start < end; start++, end--) {
        swap(input[start], input[end]);
    }
}
void topNLexicographicalRepresentations(char* input, unsigned number) {

    insertionSort(input);
    
    if (maxLexicographicalRepresentations(input) < number) {

        number = maxLexicographicalRepresentations(input);

    }

    do
    {
        cout << input << endl;
        NextLexicographicalRepresentation(input);
        number--;

    } while (number != 0);
   
}

int main()
{
    char* input = new char[MAX_SIZE];
    cin >> input;

    unsigned N;
